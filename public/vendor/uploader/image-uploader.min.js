(function ($) {
  $.fn.imageUploader = function (options) {
    let defaults = {
      preloaded: [],
      imagesInputName: "images",
      preloadedInputName: "preloaded",
      label: "+Browse or Drag & Drop",
    };
    let plugin = this;
    plugin.settings = {};
    plugin.init = function () {
      plugin.settings = $.extend(plugin.settings, defaults, options);
      plugin.each(function (i, wrapper) {
        let $container = createContainer();
        $(wrapper).append($container);
        $container.on("dragover", fileDragHover.bind($container));
        $container.on("dragleave", fileDragHover.bind($container));
        $container.on("drop", fileSelectHandler.bind($container));
        if (plugin.settings.preloaded.length) {
          $container.addClass("has-files");
          let $uploadedContainer = $container.find(".uploaded");
          for (let i = 0; i < plugin.settings.preloaded.length; i++) {
            $uploadedContainer.append(
              createImg(
                plugin.settings.preloaded[i].src,
                plugin.settings.preloaded[i].id,
                !0
              )
            );
          }
        }
      });
    };
    let dataTransfer = new DataTransfer();
    let createContainer = function () {
      let $container = $("<div>", { class: "image-uploader" }),
        $input = $("<input>", {
          type: "file",
          id: plugin.settings.imagesInputName + "-" + random(),
          name: plugin.settings.imagesInputName + "[]",
          multiple: "",
        }).appendTo($container),
        $uploadedContainer = $("<div>", { class: "uploaded" }).appendTo(
          $container
        ),
        $textContainer = $("<div>", { class: "upload-text" }).appendTo(
          $container
        ),
        // $i = $("<i>", {
        //   class: "material-icons",
        //   text: "cloud_upload",
        // }).appendTo($textContainer),
        $span = $("<span>", {
          class: "uploader-title",
          text: plugin.settings.label,
        }).appendTo($textContainer);
      $container.on("click", function (e) {
        prevent(e);
        $input.trigger("click");
      });
      $input.on("click", function (e) {
        e.stopPropagation();
      });
      $input.on("change", fileSelectHandler.bind($container));
      return $container;
    };
    let prevent = function (e) {
      e.preventDefault();
      e.stopPropagation();
    };
    let createImg = function (src, id) {
      let $container = $("<div>", { class: "uploaded-image" }),
        $img = $("<img>", { src: src }).appendTo($container),
        $button = $("<button>", { class: "delete-image" }).appendTo($container),
        // $i = $("<i>", { class: "material-icons", text: "clear" }).appendTo(
        $i =
          $(`<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="35.418" height="35.418" viewBox="0 0 35.418 35.418">
              <defs>
                <filter id="Icon_material-cancel" x="0" y="0" width="35.418" height="35.418" filterUnits="userSpaceOnUse">
                  <feOffset dy="3" input="SourceAlpha"/>
                  <feGaussianBlur stdDeviation="3" result="blur"/>
                  <feFlood flood-opacity="0.161"/>
                  <feComposite operator="in" in2="blur"/>
                  <feComposite in="SourceGraphic"/>
                </filter>
              </defs>
              <g transform="matrix(1, 0, 0, 1, 0, 0)" filter="url(#Icon_material-cancel)">
                <path id="Icon_material-cancel-2" data-name="Icon material-cancel" d="M11.709,3a8.709,8.709,0,1,0,8.709,8.709A8.7,8.7,0,0,0,11.709,3Zm4.354,11.836-1.228,1.228-3.127-3.127L8.582,16.063,7.354,14.836l3.127-3.127L7.354,8.582,8.582,7.354l3.127,3.127,3.127-3.127,1.228,1.228-3.127,3.127Z" transform="translate(6 3)" fill="#fff"/>
              </g>
            </svg>`).appendTo($button);
      if (plugin.settings.preloaded.length) {
        $container.attr("data-preloaded", !0);
        let $preloaded = $("<input>", {
          type: "hidden",
          name: plugin.settings.preloadedInputName + "[]",
          value: id,
        }).appendTo($container);
      } else {
        $container.attr("data-index", id);
      }
      $container.on("click", function (e) {
        prevent(e);
      });
      $button.on("click", function (e) {
        prevent(e);
        if ($container.data("index")) {
          let index = parseInt($container.data("index"));
          $container
            .find(".uploaded-image[data-index]")
            .each(function (i, cont) {
              if (i > index) {
                $(cont).attr("data-index", i - 1);
              }
            });
          dataTransfer.items.remove(index);
        }
        $container.remove();
        if (!$container.find(".uploaded-image").length) {
          $container.removeClass("has-files");
        }
      });
      return $container;
    };
    let fileDragHover = function (e) {
      prevent(e);
      if (e.type === "dragover") {
        $(this).addClass("drag-over");
      } else {
        $(this).removeClass("drag-over");
      }
    };
    let fileSelectHandler = function (e) {
      prevent(e);
      let $container = $(this);
      $container.removeClass("drag-over");
      let files = e.target.files || e.originalEvent.dataTransfer.files;
      setPreview($container, files);
    };
    let setPreview = function ($container, files) {
      $container.addClass("has-files");
      let $uploadedContainer = $container.find(".uploaded"),
        $input = $container.find('input[type="file"]');
      $(files).each(function (i, file) {
        dataTransfer.items.add(file);
        $uploadedContainer.append(
          createImg(URL.createObjectURL(file), dataTransfer.items.length - 1)
        );
      });
      $input.prop("files", dataTransfer.files);
    };
    let random = function () {
      return Date.now() + Math.floor(Math.random() * 100 + 1);
    };
    this.init();
    return this;
  };
})(jQuery);
